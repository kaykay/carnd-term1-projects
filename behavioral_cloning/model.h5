import csv
import cv2
import numpy as np
import matplotlib.pyplot as plt
import random
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Lambda, ELU
from keras.layers.convolutional import Convolution2D
from keras.layers import Cropping2D
from keras.regularizers import l2
from sklearn.model_selection import train_test_split


def get_model(time_len=1):
    '''
    Define model based on nVidia's neural network.
    '''
    row, col, ch= 160, 320, 3  # camera format

    model = Sequential()
    #Normalization
    model.add(Lambda(lambda x: x/127.5 - 1.,
              input_shape=(row, col, ch),
              output_shape=(row, col, ch)))
    #Add cropping
    model.add(Cropping2D(cropping=((60,20), (0,0)), input_shape=(160,320,3)))
    
    # Add 5x5 convolution layers (output depth 24, 36, and 48), each with 2x2 stride
    model.add(Convolution2D(24, 5, 5, subsample=(2, 2), border_mode='valid', W_regularizer=l2(0.001)))
    model.add(ELU())
    model.add(Convolution2D(36, 5, 5, subsample=(2, 2), border_mode='valid', W_regularizer=l2(0.001)))
    model.add(ELU())
    model.add(Convolution2D(48, 5, 5, subsample=(2, 2), border_mode='valid', W_regularizer=l2(0.001)))
    model.add(ELU())

    #model.add(Dropout(0.50))
    
    # Add two 3x3 convolution layers (output depth 64, and 64)
    model.add(Convolution2D(64, 3, 3, border_mode='valid', W_regularizer=l2(0.001)))
    model.add(ELU())
    model.add(Convolution2D(64, 3, 3, border_mode='valid', W_regularizer=l2(0.001)))
    model.add(ELU())

    # Add a flatten layer
    model.add(Flatten())

    # Add three fully connected layers (depth 100, 50, 10), tanh activation (and dropouts)
    model.add(Dense(100, W_regularizer=l2(0.001)))
    model.add(ELU())
    model.add(Dropout(0.50))
    model.add(Dense(50, W_regularizer=l2(0.001)))
    model.add(ELU())
    model.add(Dropout(0.50))
    model.add(Dense(10, W_regularizer=l2(0.001)))
    model.add(ELU())
    model.add(Dropout(0.50))

    # Add a fully connected output layer
    model.add(Dense(1, activation='linear', init='he_normal', W_regularizer=l2(0.001)))
    
    model.compile(optimizer="adam", loss="mse")
  
    return model


#Read Driving log data
lines = []
with open('data/driving_log.csv') as csvfile:
    reader = csv.reader(csvfile)
    header = next(reader)
    for line in reader:
        lines.append(line)

#method to vary brightness, Convert to HSV, increase V channel
#convert it back to RGB
def vary_brightness(image):
    image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
    brightness = random.random() + .25
    image[:,:,2] = image[:,:,2] * brightness
    image = cv2.cvtColor(image, cv2.COLOR_HSV2RGB)
    return image

images = []
measurements = []
for line in lines:
    measurement = float(line[3])
    if(float(line[6]) < 0.1 or (measurement < 0.1 and random.random() > 0.5)):
        continue
    measurements.append(measurement)
    source_path = line[0]
    filename = source_path.strip()
    current_path = 'data/' + filename
    image = cv2.imread(current_path)
    
    images.append(image)
    
    #Flip the image vertically and flip measurement
    flip_image = cv2.flip(image, 1)
    images.append(flip_image)
    measurements.append(-measurement)
    
    # create adjusted steering measurements for the side camera images
    correction = 0.27 # this is a parameter to tune
    steering_left = measurement + correction
    steering_right = measurement - correction
    
    
    img_left = cv2.imread('data/' + line[1].strip())
    img_right = cv2.imread('data/' + line[2].strip())
    
    flip_img_left = cv2.flip(img_left, 1)
    flip_img_right = cv2.flip(img_right, 1)
    if (measurement == 0.0):
    rn = random.random()
    if ( rn < 0.25):
        images.extend((img_left, img_right))
        measurements.extend((steering_left, steering_right))
    elif (rn >= 0.25 and rn < 0.5):
        images.extend((img_left, flip_img_right))
        measurements.extend((steering_left, -steering_right))
    elif (rn >= 0.5 and rn < 0.75):
        images.extend((img_right, flip_img_left))
        measurements.extend(( steering_right, -steering_left))
    else:
        images.extend((img_left, flip_img_left))
        measurements.extend((steering_left, -steering_left))


#Change to RGB as input is RGB
images = [cv2.cvtColor(image, cv2.COLOR_BGR2RGB) for image in images]
#Apply random brightness
images = [vary_brightness(image) for image in images]
    
# print a histogram to see which steering angle ranges are most overrepresented
num_bins = 23
avg_samples_per_bin = len(measurements)/num_bins
hist, bins = np.histogram(measurements, num_bins)
width = 0.7 * (bins[1] - bins[0])
center = (bins[:-1] + bins[1:]) / 2
#plt.bar(center, hist, align='center', width=width)
#plt.plot((np.min(measurements), np.max(measurements)), (avg_samples_per_bin, avg_samples_per_bin), 'k-')
#plt.show()
    

X_train = np.array(images)
y_train = np.array(measurements)


model = get_model()

model.compile(loss='mse', optimizer='adam')

X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=0.1, random_state=14)
model.fit(X_train, y_train,  validation_data=(X_validation, y_validation), shuffle=True, nb_epoch=10)

model.save('modelb.h5')
